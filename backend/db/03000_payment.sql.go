// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: 03000_payment.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPaymentOperation = `-- name: CreatePaymentOperation :one
INSERT    INTO payment.operations (
          destination,
          operation_number,
          operation_date,
          sender_name,
          amount_sent,
          currency,
          additional_notes
          )
VALUES    ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, destination, operation_number, operation_date, sender_name, amount_sent, currency, created_at, additional_notes
`

type CreatePaymentOperationParams struct {
	Destination     string           `json:"destination"`
	OperationNumber string           `json:"operation_number"`
	OperationDate   pgtype.Timestamp `json:"operation_date"`
	SenderName      pgtype.Text      `json:"sender_name"`
	AmountSent      pgtype.Numeric   `json:"amount_sent"`
	Currency        string           `json:"currency"`
	AdditionalNotes pgtype.Text      `json:"additional_notes"`
}

// Crear una nueva operación de pago (sender_name opcional)
func (q *Queries) CreatePaymentOperation(ctx context.Context, arg CreatePaymentOperationParams) (PaymentOperation, error) {
	row := q.db.QueryRow(ctx, createPaymentOperation,
		arg.Destination,
		arg.OperationNumber,
		arg.OperationDate,
		arg.SenderName,
		arg.AmountSent,
		arg.Currency,
		arg.AdditionalNotes,
	)
	var i PaymentOperation
	err := row.Scan(
		&i.ID,
		&i.Destination,
		&i.OperationNumber,
		&i.OperationDate,
		&i.SenderName,
		&i.AmountSent,
		&i.Currency,
		&i.CreatedAt,
		&i.AdditionalNotes,
	)
	return i, err
}

const deletePaymentOperation = `-- name: DeletePaymentOperation :one
DELETE    FROM payment.operations
WHERE     id = $1
RETURNING id, destination, operation_number, operation_date, sender_name, amount_sent, currency, created_at, additional_notes
`

// Eliminar operación
func (q *Queries) DeletePaymentOperation(ctx context.Context, id int32) (PaymentOperation, error) {
	row := q.db.QueryRow(ctx, deletePaymentOperation, id)
	var i PaymentOperation
	err := row.Scan(
		&i.ID,
		&i.Destination,
		&i.OperationNumber,
		&i.OperationDate,
		&i.SenderName,
		&i.AmountSent,
		&i.Currency,
		&i.CreatedAt,
		&i.AdditionalNotes,
	)
	return i, err
}

const getPaymentOperationByID = `-- name: GetPaymentOperationByID :one
SELECT    id, destination, operation_number, operation_date, sender_name, amount_sent, currency, created_at, additional_notes
FROM      payment.operations
WHERE     id = $1
`

// Obtener operación por ID
func (q *Queries) GetPaymentOperationByID(ctx context.Context, id int32) (PaymentOperation, error) {
	row := q.db.QueryRow(ctx, getPaymentOperationByID, id)
	var i PaymentOperation
	err := row.Scan(
		&i.ID,
		&i.Destination,
		&i.OperationNumber,
		&i.OperationDate,
		&i.SenderName,
		&i.AmountSent,
		&i.Currency,
		&i.CreatedAt,
		&i.AdditionalNotes,
	)
	return i, err
}

const getPaymentOperationByNumber = `-- name: GetPaymentOperationByNumber :one
SELECT    id, destination, operation_number, operation_date, sender_name, amount_sent, currency, created_at, additional_notes
FROM      payment.operations
WHERE     operation_number = $1
`

// Obtener operación por número de operación
func (q *Queries) GetPaymentOperationByNumber(ctx context.Context, operationNumber string) (PaymentOperation, error) {
	row := q.db.QueryRow(ctx, getPaymentOperationByNumber, operationNumber)
	var i PaymentOperation
	err := row.Scan(
		&i.ID,
		&i.Destination,
		&i.OperationNumber,
		&i.OperationDate,
		&i.SenderName,
		&i.AmountSent,
		&i.Currency,
		&i.CreatedAt,
		&i.AdditionalNotes,
	)
	return i, err
}

const listPaymentOperations = `-- name: ListPaymentOperations :many
SELECT    id, destination, operation_number, operation_date, sender_name, amount_sent, currency, created_at, additional_notes
FROM      payment.operations
ORDER BY  created_at
`

// Listar todas las operaciones ordenadas por fecha de creación
func (q *Queries) ListPaymentOperations(ctx context.Context) ([]PaymentOperation, error) {
	rows, err := q.db.Query(ctx, listPaymentOperations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PaymentOperation
	for rows.Next() {
		var i PaymentOperation
		if err := rows.Scan(
			&i.ID,
			&i.Destination,
			&i.OperationNumber,
			&i.OperationDate,
			&i.SenderName,
			&i.AmountSent,
			&i.Currency,
			&i.CreatedAt,
			&i.AdditionalNotes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePaymentOperation = `-- name: UpdatePaymentOperation :one
UPDATE    payment.operations
SET       destination = COALESCE($2, destination),
          operation_number = COALESCE($3, operation_number),
          operation_date = COALESCE($4, operation_date),
          sender_name = COALESCE($5, sender_name),
          amount_sent = COALESCE($6, amount_sent),
          currency = COALESCE($7, currency),
          additional_notes = COALESCE($8, additional_notes)
WHERE     id = $1
RETURNING id, destination, operation_number, operation_date, sender_name, amount_sent, currency, created_at, additional_notes
`

type UpdatePaymentOperationParams struct {
	ID              int32            `json:"id"`
	Destination     string           `json:"destination"`
	OperationNumber string           `json:"operation_number"`
	OperationDate   pgtype.Timestamp `json:"operation_date"`
	SenderName      pgtype.Text      `json:"sender_name"`
	AmountSent      pgtype.Numeric   `json:"amount_sent"`
	Currency        string           `json:"currency"`
	AdditionalNotes pgtype.Text      `json:"additional_notes"`
}

// Actualizar operación (campos opcionales, sender_name puede mantenerse o establecerse a NULL)
func (q *Queries) UpdatePaymentOperation(ctx context.Context, arg UpdatePaymentOperationParams) (PaymentOperation, error) {
	row := q.db.QueryRow(ctx, updatePaymentOperation,
		arg.ID,
		arg.Destination,
		arg.OperationNumber,
		arg.OperationDate,
		arg.SenderName,
		arg.AmountSent,
		arg.Currency,
		arg.AdditionalNotes,
	)
	var i PaymentOperation
	err := row.Scan(
		&i.ID,
		&i.Destination,
		&i.OperationNumber,
		&i.OperationDate,
		&i.SenderName,
		&i.AmountSent,
		&i.Currency,
		&i.CreatedAt,
		&i.AdditionalNotes,
	)
	return i, err
}
